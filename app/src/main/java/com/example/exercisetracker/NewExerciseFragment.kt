package com.example.exercisetracker

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.example.exercisetracker.databinding.FragmentNewExerciseBinding
import com.example.exercisetracker.db.UserExercise
import com.example.exercisetracker.db.UserExerciseEntity
import com.example.exercisetracker.repository.TrainingApplication
import com.example.exercisetracker.viewmodel.SharedViewModel
import com.example.exercisetracker.viewmodel.SharedViewModelFactory
import kotlinx.coroutines.launch

class NewExerciseFragment: Fragment() {

    private val navigationArgs: NewExerciseFragmentArgs by navArgs()

    private var _binding: FragmentNewExerciseBinding? = null
    private val binding get() = _binding!!
    private lateinit var userExercise: UserExercise


    private val sharedViewModel: SharedViewModel by activityViewModels() {
        SharedViewModelFactory(
            (activity?.application as TrainingApplication).trainingRepository
        )
    }

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?
    ): View? {
        _binding = FragmentNewExerciseBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.buttonBack.setOnClickListener {
            findNavController().navigate(R.id.action_newExerciseFragment_to_myExercisesFragment)
        }

        val buttonCamera = binding.buttonCamera
        buttonCamera.setOnClickListener {
        }

        val buttonGallery = binding.buttonGallery
        buttonGallery.setOnClickListener {

        }

        // ExerciseID is set from navargs if user navigates via edit-button on a userExercise
        val exerciseId =navigationArgs.userExerciseId
        if (exerciseId > 0) {
            sharedViewModel.currentUserExercise.observe(this.viewLifecycleOwner) {selectedExercise ->
                userExercise = selectedExercise
                bindUserExercise(userExercise)
            }
        }

        // Make sure userId is valid before using it
        if (sharedViewModel.activeUser.value!!.id != 0) {
            // In NewExerciseFragment
            binding.buttonSaveExercise.setOnClickListener {

                val exerciseName = binding.exerciseNameInput.text.toString()
                val description = binding.exerciseDescriptInput.text.toString()

                val newUserExercise = UserExercise(
                    id = 0, // This will be auto-generated by the database
                    user_id = sharedViewModel.activeUser.value!!.id,
                    name = exerciseName,
                    photo_url = "https://wfa-media.com/exercise23/img/exercise1.png", // Set a default value or get it from the UI
                    description = description,
                    icon = "ic_launcher_foreground", // Set a default value or get it from the UI
                    infobox_color = "#FE0980" // Set a default value or get it from the UI
                )

                // Save the exercise to the database
                viewLifecycleOwner.lifecycleScope.launch {
                    sharedViewModel.createUserExercise(newUserExercise)
                }

                // Navigate to the MyExerciseFragment
                navigateToMyExercises()
            }
        }
    }

    private fun bindUserExercise(userExercise: UserExercise){
        binding.apply {
            exerciseNameInput.setText(userExercise.name, TextView.BufferType.SPANNABLE)
            exerciseDescriptInput.setText(userExercise.description, TextView.BufferType.SPANNABLE)
            val resourceId = resources.getIdentifier(userExercise.icon, "drawable", null)
            imageviewExercise.setImageResource(resourceId)
            buttonSaveExercise.setOnClickListener{
                updateUserExercise()
                navigateToMyExercises()

            }
        }

    }

    private fun updateUserExercise() {
        val exerciseName = binding.exerciseNameInput.text.toString()
        val exerciseDescription = binding.exerciseDescriptInput.text.toString()
        if (sharedViewModel.isValidExerciseEntry(exerciseName, exerciseDescription)) {
            viewLifecycleOwner.lifecycleScope.launch {
                sharedViewModel.updateUserExercise(
                    UserExercise(
                        id = userExercise.id,
                        user_id = userExercise.user_id,
                        name = exerciseName,
                        photo_url = userExercise.photo_url,
                        description = exerciseDescription,
                        icon = userExercise.icon,
                        infobox_color = userExercise.infobox_color)
                )
            }
        }
    }

    private fun navigateToMyExercises(){
        val action = NewExerciseFragmentDirections
            .actionNewExerciseFragmentToMyExercisesFragment()
        findNavController().navigate(action)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
