package com.example.exercisetracker

import android.content.ActivityNotFoundException
import android.content.Intent
import android.graphics.Bitmap
import android.os.Bundle
import android.provider.MediaStore
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.example.exercisetracker.databinding.FragmentNewExerciseBinding
import com.example.exercisetracker.db.UserExercise
import com.example.exercisetracker.db.UserExerciseEntity
import com.example.exercisetracker.repository.TrainingApplication
import com.example.exercisetracker.viewmodel.SharedViewModel
import com.example.exercisetracker.viewmodel.SharedViewModelFactory
import kotlinx.coroutines.launch

class NewExerciseFragment: Fragment() {

    private val navigationArgs: NewExerciseFragmentArgs by navArgs()

    private var _binding: FragmentNewExerciseBinding? = null
    private val binding get() = _binding!!
    private lateinit var userExercise: UserExercise

    private val REQUEST_IMAGE_CAPTURE = 1
    private val REQUEST_GALLERY = 2

    private lateinit var imageView: ImageView

    private val sharedViewModel: SharedViewModel by activityViewModels() {
        SharedViewModelFactory(
            (activity?.application as TrainingApplication).trainingRepository
        )
    }

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?
    ): View? {
        _binding = FragmentNewExerciseBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        sharedViewModel.setToolbarTitle(getString(R.string.title_new_exercise))

        imageView = binding.imageviewExercise

        binding.buttonBack.setOnClickListener {
            findNavController().navigate(R.id.action_newExerciseFragment_to_myExercisesFragment)
        }

        val buttonCamera = binding.buttonCamera
        buttonCamera.setOnClickListener {
            dispatchTakePictureIntent()
        }

        val buttonGallery = binding.buttonGallery
        buttonGallery.setOnClickListener {
            dispatchGalleryIntent()

        }

        // ExerciseID is set from navargs if user navigates via edit-button on a userExercise
        val exerciseId =navigationArgs.userExerciseId
        if (exerciseId > 0) {
            sharedViewModel.currentUserExercise.observe(this.viewLifecycleOwner) {selectedExercise ->
                userExercise = selectedExercise
                bindUserExercise(userExercise)
            }
        }

        // Make sure userId is valid before using it
        if (sharedViewModel.activeUser.value!!.id != 0) {
            // In NewExerciseFragment
            binding.buttonSaveExercise.setOnClickListener {

                val exerciseName = binding.exerciseNameInput.text.toString()
                val description = binding.exerciseDescriptInput.text.toString()

                val newUserExercise = UserExercise(
                    id = 0, // This will be auto-generated by the database
                    user_id = sharedViewModel.activeUser.value!!.id,
                    name = exerciseName,
                    photo_url = "https://wfa-media.com/exercise23/img/exercise1.png", // Set a default value or get it from the UI
                    description = description,
                    icon = "ic_launcher_foreground", // Set a default value or get it from the UI
                    infobox_color = "#FE0980" // Set a default value or get it from the UI
                )

                // Save the exercise to the database
                viewLifecycleOwner.lifecycleScope.launch {
                    sharedViewModel.createUserExercise(newUserExercise)
                }

                // Navigate to the MyExerciseFragment
                navigateToMyExercises()
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    private fun bindUserExercise(userExercise: UserExercise){
        binding.apply {
            exerciseNameInput.setText(userExercise.name, TextView.BufferType.SPANNABLE)
            exerciseDescriptInput.setText(userExercise.description, TextView.BufferType.SPANNABLE)
            val resourceId = resources.getIdentifier(userExercise.icon, "drawable", null)
            imageviewExercise.setImageResource(resourceId)
            buttonSaveExercise.setOnClickListener{
                updateUserExercise()
                navigateToMyExercises()

            }
        }
    }

    private fun updateUserExercise() {
        val exerciseName = binding.exerciseNameInput.text.toString()
        val exerciseDescription = binding.exerciseDescriptInput.text.toString()
        if (sharedViewModel.isValidExerciseEntry(exerciseName, exerciseDescription)) {
            viewLifecycleOwner.lifecycleScope.launch {
                sharedViewModel.updateUserExercise(
                    UserExercise(
                        id = userExercise.id,
                        user_id = userExercise.user_id,
                        name = exerciseName,
                        photo_url = userExercise.photo_url,
                        description = exerciseDescription,
                        icon = userExercise.icon,
                        infobox_color = userExercise.infobox_color)
                )
            }
        }
    }

    private fun navigateToMyExercises(){
        val action = NewExerciseFragmentDirections
            .actionNewExerciseFragmentToMyExercisesFragment()
        findNavController().navigate(action)
    }

    private fun dispatchTakePictureIntent() {
        val takePictureIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        try {
            @Suppress("DEPRECATION")
            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE)
        } catch (e: ActivityNotFoundException) {
            e.localizedMessage?.let { Log.d("DEBUG", it) }
        }
    }

    private fun dispatchGalleryIntent() {
        val galleryIntent = Intent(
            Intent.ACTION_GET_CONTENT, MediaStore.Images.Media.EXTERNAL_CONTENT_URI
        )
        @Suppress("DEPRECATION")
        startActivityForResult(galleryIntent, REQUEST_GALLERY)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        @Suppress("DEPRECATION")
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == AppCompatActivity.RESULT_OK) {
            val bitmap = data?.extras?.get("data") as Bitmap
            imageView.setImageBitmap(bitmap)
        } else if (requestCode == REQUEST_GALLERY && resultCode == AppCompatActivity.RESULT_OK) {
            imageView.setImageURI(data?.data)
        } else {
            Toast.makeText(context, "Feil ved visning av bilde", Toast.LENGTH_SHORT).show()
        }
    }
}
